# -*- coding: utf-8 -*-
"""CSE366_Sentiment_Analysis_of_Twitter_Tweets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WpJMucNxtM4tpI4x3Mm3nuIAdHlJ-nsh

Importing Dependencies
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score, recall_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""The Dataset"""

df = pd.read_csv('/content/sentiment_analysis.csv', encoding = "ISO-8859-1")

df.shape

df.head()

df.columns = ['label','ID','Date','Query','Username','Tweet']

df.head()

df.columns

#n = len(pd.unique(df['label']))
#df["label"].replace({4: 1}, inplace=True)
n = pd.unique(df['label'])
print(n)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['label'] = le.fit_transform(df['label'])

df.isnull().sum()

#replace null values with empty string
df = df.fillna('')

from sklearn.utils import shuffle
df = shuffle(df,random_state=42)
df = df[1:800000]

df['label'].value_counts()

df['content'] = df['Username']+ ' ' + df['Tweet']

print(df['content'])

X = df['content']
Y = df['label']

print(X)

print(Y)

"""Stemming"""

port_stem = PorterStemmer()

def stemming(content):   
  stemmed_content = re.sub('[^a-zA-Z]',' ', content)  
  stemmed_content = stemmed_content.lower() 
  stemmed_content = stemmed_content.split() 
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')] 
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

df['content'] = df['content'].apply(stemming)

print(df['content'])

#converting textual data to numerical data
vectorizer = TfidfVectorizer(max_features = 600)
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, stratify=Y, random_state=1)

print(X.shape, x_train.shape, x_test.shape)

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier

model1 = DecisionTreeClassifier(criterion='entropy', random_state=0)

model1.fit(x_train, y_train)

x_train_predict = model1.predict(x_train)
training_data_accuracy = accuracy_score(x_train_predict, y_train)
print(training_data_accuracy)

x_test_predict = model1.predict(x_test)
test_data_accuracy = accuracy_score(x_test_predict, y_test)
print(test_data_accuracy)

training_precision = precision_score(y_train, x_train_predict)
print('Training data precision score = ', training_precision)
training_recall = recall_score(y_train, x_train_predict)
print('Training data recall score = ', training_recall)
training_matrix = confusion_matrix(y_train, x_train_predict)
print('Training data confusion matrix = ', training_matrix)

testing_precision = precision_score(y_test, x_test_predict)
print('Testing data precision score = ', testing_precision)
testing_recall = recall_score(y_test, x_test_predict)
print('Testing data recall score = ', testing_recall)
testing_matrix = confusion_matrix(y_test, x_test_predict)
print('Testing data confusion matrix = ', testing_matrix)

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier
model2 = RandomForestClassifier(criterion='entropy', random_state=0)
model2.fit(x_train, y_train)

x_test_predict = model2.predict(x_test)
test_data_accuracy = accuracy_score(x_test_predict, y_test)
print(test_data_accuracy)

x_train_predict = model2.predict(x_train)
training_data_accuracy = accuracy_score(x_train_predict, y_train)
print(training_data_accuracy)

training_precision = precision_score(y_train, x_train_predict)
print('Training data precision score = ', training_precision)
training_recall = recall_score(y_train, x_train_predict)
print('Training data recall score = ', training_recall)
training_matrix = confusion_matrix(y_train, x_train_predict)
print('Training data confusion matrix = ', training_matrix)

testing_precision = precision_score(y_test, x_test_predict)
print('Testing data precision score = ', testing_precision)
testing_recall = recall_score(y_test, x_test_predict)
print('Testing data recall score = ', testing_recall)
testing_matrix = confusion_matrix(y_test, x_test_predict)
print('Testing data confusion matrix = ', testing_matrix)



"""**Gaussian Naive Bayes**

"""

from sklearn.naive_bayes import GaussianNB

model3 = GaussianNB()

x_train_nb = x_train.toarray()
model3.fit(x_train_nb,y_train)

x_train_predict = model3.predict(x_train_nb)
training_data_accuracy = accuracy_score(x_train_predict, y_train)
print(training_data_accuracy)

x_test_nb = x_test.toarray()
x_test_predict = model3.predict(x_test_nb)
test_data_accuracy = accuracy_score(x_test_predict, y_test)
print(test_data_accuracy)

training_precision = precision_score(y_train, x_train_predict)
print('Training data precision score = ', training_precision)
training_recall = recall_score(y_train, x_train_predict)
print('Training data recall score = ', training_recall)
training_matrix = confusion_matrix(y_train, x_train_predict)
print('Training data confusion matrix = ', training_matrix)

testing_precision = precision_score(y_test, x_test_predict)
print('Testing data precision score = ', testing_precision)
testing_recall = recall_score(y_test, x_test_predict)
print('Testing data recall score = ', testing_recall)
testing_matrix = confusion_matrix(y_test, x_test_predict)
print('Testing data confusion matrix = ', testing_matrix)

"""**Multinomial Naive Bayes**"""

from sklearn.naive_bayes import MultinomialNB

model4 = MultinomialNB()

x_train_nb = x_train.toarray()
model4.fit(x_train_nb,y_train)

x_train_predict = model4.predict(x_train_nb)
training_data_accuracy = accuracy_score(x_train_predict, y_train)
print(training_data_accuracy)

x_test_nb = x_test.toarray()
x_test_predict = model4.predict(x_test_nb)
test_data_accuracy = accuracy_score(x_test_predict, y_test)
print(test_data_accuracy)

training_precision = precision_score(y_train, x_train_predict)
print('Training data precision score = ', training_precision)
training_recall = recall_score(y_train, x_train_predict)
print('Training data recall score = ', training_recall)
training_matrix = confusion_matrix(y_train, x_train_predict)
print('Training data confusion matrix = ', training_matrix)

testing_precision = precision_score(y_test, x_test_predict)
print('Testing data precision score = ', testing_precision)
testing_recall = recall_score(y_test, x_test_predict)
print('Testing data recall score = ', testing_recall)
testing_matrix = confusion_matrix(y_test, x_test_predict)
print('Testing data confusion matrix = ', testing_matrix)

"""**Support Vector Machine**"""

from sklearn.svm import LinearSVC
svm_model=LinearSVC(random_state= 0 ,max_iter=15000)
svm_model.fit(x_train, y_train)

predictionsTest = svm_model.predict(x_test)
predictionsTrain = svm_model.predict(x_train)

print(accuracy_score(y_test, predictionsTest))
print(accuracy_score(y_train, predictionsTrain))

training_precision = precision_score(y_train, predictionsTrain)
print('Training data precision score = ', training_precision)
training_recall = recall_score(y_train, predictionsTrain)
print('Training data recall score = ', training_recall)
training_matrix = confusion_matrix(y_train, predictionsTrain)
print('Training data confusion matrix = ', training_matrix)

testing_precision = precision_score(y_test, predictionsTest)
print('Testing data precision score = ', testing_precision)
testing_recall = recall_score(y_test, predictionsTest)
print('Testing data recall score = ', testing_recall)
testing_matrix = confusion_matrix(y_test, predictionsTest)
print('Testing data confusion matrix = ', testing_matrix)

"""**Neural Network**"""

from sklearn.neural_network import MLPClassifier
clf = MLPClassifier(alpha=1e-5, hidden_layer_sizes=(30,), random_state=1)
clf.fit(x_train, y_train)

predictionsTest = clf.predict(x_test)
predictionsTrain = clf.predict(x_train)

print(accuracy_score(y_test, predictionsTest))
print(accuracy_score(y_train, predictionsTrain))

training_precision = precision_score(y_train, predictionsTrain)
print('Training data precision score = ', training_precision)
training_recall = recall_score(y_train, predictionsTrain)
print('Training data recall score = ', training_recall)
training_matrix = confusion_matrix(y_train, predictionsTrain)
print('Training data confusion matrix = ', training_matrix)

testing_precision = precision_score(y_test, predictionsTest)
print('Testing data precision score = ', testing_precision)
testing_recall = recall_score(y_test, predictionsTest)
print('Testing data recall score = ', testing_recall)
testing_matrix = confusion_matrix(y_test, predictionsTest)
print('Testing data confusion matrix = ', testing_matrix)

